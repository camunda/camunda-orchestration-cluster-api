extends: ["spectral:oas"]

functions:
  - enforceCamundaKeyPathParams
  - enforceKeySchemasSemanticType
  - ensureReferencedSchemaAdditionalProperties
  - vendorExtensionWhitelist
  - duplicatePolicyConsistency
  - idempotencyKeyHeaderPresent
  - conditionalIdempotencyStructure
  - enforceCamundaKeyPropertiesDeep

rules:
  camunda-key-properties-must-use-semantic-key-ref-deep:
    description: "(Camunda) *Key properties must be $ref to semantic key schema (deep scan)."
    severity: error
    given: "$"  # root; custom function performs full traversal
    then:
      function: enforceCamundaKeyPropertiesDeep
      functionOptions:
        exceptions: "correlationKey itemKey ResourceKey"

  key-path-params-must-use-semantic-key-ref:
    description: "Path parameters ending in 'Key' must be $ref to a semantic key schema (x-semantic-key or x-semantic-type)."
    message: "Path parameter '{{value.name}}' must use $ref to a semantic key schema (with x-semantic-key or x-semantic-type), not an inline primitive."
    given: "$.paths[*][*].parameters[?(@.in=='path' && @.name.match(/Key$/))]"
    severity: error
    then:
      function: enforceCamundaKeyPathParams
      functionOptions:
        exceptions:
          - correlationKey
          - resourceKey

  key-schemas-must-declare-semantic-type:
    description: "Schemas whose name ends with 'Key' must declare x-semantic-type (the stable semantic key signal)."
    message: "Schema '{{property}}' must declare x-semantic-type (or transitional x-semantic-key)."
    given: "$.components.schemas[?(@property.match(/Key$/))]"
    severity: error
    then:
      function: enforceKeySchemasSemanticType
      functionOptions:
        exceptions: 
          - DecisionEvaluationByKey 
          - ProcessInstanceCreationInstructionByKey
          - LongKey
          - ResourceKey

  semantic-type-schemas-must-specify-type-string:
    description: "Schemas declaring x-semantic-type must explicitly set type: string."
    message: "Schema '{{property}}' declares x-semantic-type but must also have type: string."
    given: "$.components.schemas[?(@ && @['x-semantic-type'])]"
    severity: error
    then:
      - field: type
        function: truthy
      - function: schema
        functionOptions:
          schema:
            properties:
              type:
                const: string
            required:
              - type

  vendor-extensions-whitelist:
    description: "Only approved vendor extensions are allowed."
    message: "{{error}}"
    given: "$"
    severity: error
    then:
      function: vendorExtensionWhitelist
      functionOptions:
        allowedExtensions:
          - "x-eventually-consistent"
          - "x-semantic-type"
          - "x-semantic-key"
          - "x-polymorphic-schema"
          - "x-semantic-provider"
          - "x-operation-kind"
          - "x-duplicate-policy"
          - "x-idempotency-mechanism"
          - "x-idempotency-key-header"
          - "x-idempotency-scope"
          - "x-conditional-idempotency"
          - "x-internal"

  endpoints-must-have-consistency-declaration:
    description: "All endpoints must have x-eventually-consistent vendor extension."
    message: "Endpoint is missing x-eventually-consistent declaration. All endpoints must explicitly declare either 'x-eventually-consistent: true' or 'x-eventually-consistent: false'."
    given: 
      - "$.paths[*].get"
      - "$.paths[*].post"
      - "$.paths[*].put"
      - "$.paths[*].patch"
      - "$.paths[*].delete"
      - "$.paths[*].head"
      - "$.paths[*].options"
      - "$.paths[*].trace"
    severity: error
    then:
      field: "x-eventually-consistent"
      function: defined

  no-path-level-consistency-declaration:
    description: "x-eventually-consistent must be declared at operation level, not path level."
    message: "Path has x-eventually-consistent declared at path level. This extension should only be declared at the individual operation level (get, post, put, etc.) to ensure proper granularity and avoid inheritance issues."
    given: "$.paths[*]['x-eventually-consistent']"
    severity: error
    then:
      function: falsy

  create-operation-must-have-duplicate-policy:
    description: Create operations must declare x-duplicate-policy (phase 2+)
    given: "$..paths[*][*]"
    severity: warn  # upgrade to error after migration
    then:
      function: duplicatePolicyConsistency
      functionOptions:
        requirePolicyForCreate: true

  duplicate-policy-not-on-non-create:
    description: x-duplicate-policy only valid on create operations
    given: "$..paths[*][*]"
    severity: error
    then:
      function: duplicatePolicyConsistency
      functionOptions:
        forbidPolicyOnNonCreate: true

  duplicate-policy-idempotency-alignment:
    description: x-duplicate-policy must align with idempotent flag
    given: "$..paths[*][*]"
    severity: error
    then:
      function: duplicatePolicyConsistency
      functionOptions:
        enforceAlignment: true

  conditional-idempotency-structure:
    description: x-conditional-idempotency vendor extension must have required structure
    message: "{{error}}"
    given: "$..paths[*][*]"
    severity: error
    then:
      function: conditionalIdempotencyStructure

  idempotency-mechanism-header:
    description: idempotency-key mechanism requires matching header parameter
    given: "$..paths[*][*]"
    severity: error
    then:
      function: idempotencyKeyHeaderPresent

  conflict-mechanism-warning:
    description: conflict duplicate policy should not use advanced idempotency mechanism
    given: "$..paths[*][*]"
    severity: warn
    then:
      function: duplicatePolicyConsistency
      functionOptions:
        warnConflictWithMechanism: true

  single-tag-per-operation:
    description: "Each operation must declare exactly one tag (stabilizes generator service mapping)."
    message: "Operation must have exactly one tag (found {{value.length}})."
    given:
      - "$.paths[*].get.tags"
      - "$.paths[*].post.tags"
      - "$.paths[*].put.tags"
      - "$.paths[*].patch.tags"
      - "$.paths[*].delete.tags"
      - "$.paths[*].head.tags"
      - "$.paths[*].options.tags"
      - "$.paths[*].trace.tags"
    severity: error
    then:
      function: schema
      functionOptions:
        schema:
          type: array
          minItems: 1
          maxItems: 1

  request-inline-object-additional-properties-explicit:
    description: "Inline object request body schemas must explicitly declare additionalProperties (even if false)."
    message: "Inline request body object schema must declare additionalProperties explicitly."
    given:
      - "$.paths[*][*].requestBody.content.*.schema[?(@.type=='object' && !@.$ref)]"
    severity: error
    then:
      field: additionalProperties
      function: defined

  request-ref-schema-additional-properties-explicit:
    description: "Referenced request body component schemas must declare additionalProperties explicitly."
    message: "{{error}}"
    given:
      - "$.paths[*][*].requestBody.content.*.schema[?(@ && @.$ref)]"
    severity: error
    then:
      function: ensureReferencedSchemaAdditionalProperties

overrides:
  - files:
      - "rest-api.yaml"
      - "rest-api.generated.yaml"
    rules: 
      key-path-params-must-use-semantic-key-ref: "off"
      endpoints-must-have-consistency-declaration: "off"
      key-schemas-must-declare-semantic-type: "off"

  - files:
      - "rest-api.yaml"
    rules:
      no-$ref-siblings: "off"